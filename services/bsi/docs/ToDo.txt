1. Allow supplier to set multiple services.
2. Allow buyer or supplier to browse through the services.
3. Allow supplier to set the attributes for a service.
4. Identify the reusable code
5. Handle exception.
6. Define the unique keys for the db table.
7. Pagination using display tags.
8. Defining a web service for giving information on available services.
9. Define seed data.
10.Screen for siging up buyer and supplier.
11.Security
12.Error msg when db not connected.
13.Exception handling.
14.Screen for allowing supplier/admin login.
15.Uploading bulk data from comma delimited file.
16.Removing the html creation code from the java source. Instead create xml of the bean and then parse using xsl.
17. Defining a web service for creating a buyer and registering for a service.
18. Generate java doc.
19. Changes for the entity xml to cascade on delete all child entities.
20. Sorting the objects list.
21. Form validations.
22. All user to select mulitple locations in the same multi box.
23. Browser compatibility issues.
24. Role based access.
25. Add columns to the person table for 'IsActive'.
26. Change password feature.
27. Search a service.
28. Buyer service region currently supports  the property values for each service region. More than one service region 
can have same prop values.
29. Unable to implement the cascade delete for buyer service region and property values.
30 Browse free services
31. Paid services
32 Industrial services
33 Individual services.
34. Merge Location.js and ServiceLocation.js
35. Search service
36. JUnit test cases.
37. Remove the html code from java code for getting the service properties.
38. Add progress bar in the frame, so that appears in all pages.
39. Implementing JAAS.
40. Consolidate lib and web-inf/lib
41. Fix internationalization issue with displaytag
42. supplier should be able to unsubscribe for a specific location.
43. Activating/deactivating the person service subscription.
44. Creating a composite key on serviceregion.
45. Startup class to populate the service region.
46. exception stack trace in the log file.
47. Giving admin privileges for managing only certain services.
48. Replacing the logic,bean tag with jstl.
49. While buyer subscribe to a service the country list should come up only it has registered suppliers.
50. No stack trace should come in bsi.log
51. define one to one relationship between bsr,ssr and the persons.
52. Issue with pagination.
53. A global admin screen for setting the services for local admin
54. Combine buyer and supplier services.
55. Change the buyer_service_property_values to have values for the each sevrvice. Not for each region.
56. Combining buyer and supplier service region.
57. Build as maven project.
58. Get the UI developed from a designer.
59. Use JSF and spring framework.
60. Use hazle cast for the in-memory data cache.
61. Use spring webservices for the web service.
62. Use apache validations for validating the data.
63. Remove struts relaed dependencies from utilities.
64. See if servlet dependency really required for the utilities.
65. Modify the bsi test class to write a base class for getting the application context.
66. Add the JWebTest to the BSI projects.
67. Use mysql database.
68. Remove hibernate related code from the business layer.
69. Add locale to the token values, to get the user locale specific token values.
70. Formating the html for the specific properties of service needs to be done through xsl templates.
80. Expiry/Archive of the buyer and supplier listings.
81. Hide the apache server message and give app specific message.
82. Improve the performance using caching. Identify what all can be cached.
83. URL Navigation details should not be visible in the browser to the user.
84. key in all db columns need to be relooked into.
85. Separate the catalogging code from BSI.
86. Separate location application.
87. composite key needs to be defined in services table.
88. Password needs to be encrypted and saved in db,
89. Javascript alert messages needs to be internationalized.
90.Use apache shiro for authenticatio and authorization.
91. Use activiti for the work flow for supplier approval.
92. Embedded deployment of the derby db.
93. Asynchronously send sms messages.
94. Page caching needs to be disabled.
95. After 3 unsuccesfull attemp, the login needs to be disabled.
96. If the supplier doesn't authenticate for first time, next the id needs to be generated by deleting the row in persons table for that supplier(old one).
97. Cascade delete needs to be taken care for all the sql's generated.
98. User hazlecast for the caching and clustering for email sending and other things.
99. Encrypt the url sent for activating the account.
100. In catalog, need to be able to create a service which refers to another service.
101. Use the mysql load file to convert the csv files into mysql specific. No need of mapper sql's
102. Delete tokens.
103. Automatically populated the ISD codes of the supplier and buyer based on the country selected while doing registration.
104, While creating the tokens the type of the property  like TF,DD should automatically come in the ui as drop down and user should be able to select from that values.
105. Encrypt the password stored in db.
106. Test complete application by keeping low session time out.
107. Deploy as osgi bundle.
108. use haproxy and nginx
109. Try with riak database.
110. To divivde the src in interface and impl and resource repositories.
111. Use Amazon SQS, RDS and SNS web services for messaging and notifications.
112. Encrypt the password saved in the db.
113. Put the repository on git.
114. use the client side caching using the http headers and etag.
115. Remove the duplicate connection information from hibernate cfg xml and bean spring config xml.
117. HibernateUtil needs to be removed from the utilities package.
118. BSITransaction Mgr has lot of the hibernate related code. This needs to be moved to the persistence api.
119. The bsi entities xml is found both in src and resources folder. Remove the duplicate.
120. Use SLF4j for logging.
121. The persistence API should have its own uni tests.
122. Use enum for constants.
123. If after restarting the server the user is able to open any page directly.
124. Upload the code in github.
125. While displaying the pproperties drop down, first element should ask the user to select.
126. Use jquery wherever possible.
127. Create a DAO class for the catalog etc. in the service-dao services. The catalog impl from the rest should make use of the dao. In case of db accesst the catalogdbimpl should make use of this. Streamline the exception handling b/w the services.
128. Use and embedded db for running all the tests.
129. in Search suppliers page the error thrown from the server is not getting displayed in the ui.
130. Token value edit should be available.
131. AFter creating the token value, should go back to the create token page.
132.












==================================================================================

IDE improvements.
------------------
1. Use subclipse for the svn client in eclipse
2. Use m2e for maven integration in eclipse
3. Use mysql data base along with the workbench.

